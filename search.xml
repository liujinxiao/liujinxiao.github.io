<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Centos环境使用Puppeteer</title>
      <link href="/2020/02/29/%E5%9C%A8centos%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8Puppteer/"/>
      <url>/2020/02/29/%E5%9C%A8centos%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8Puppteer/</url>
      
        <content type="html"><![CDATA[<ul><li>Puppeteer是一款由<code>google</code>推出的Node库，它提供了一高级api通过devtools协议来控制<code>Chromium</code>，该库使用方式简单，备受大家欢迎。一般通过<code>npm i puppeteer</code>即可使用，而不需安装其他依赖库。</li></ul><p>一般情况下，我们在MacOs或Windows系统下使用，正常安装都不会出现问题。但是在linux系统下就会出现一些依赖或其他问题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="https://user-gold-cdn.xitu.io/2020/2/29/1708fcc32fd5b0a4?w=2686&h=1448&f=png&s=492284" alt="报错"></p><p>以上就是在centos系统下执行<code>npm install</code>所报的错误，由提示不能得出是因为下载<code>Chromium</code>失败导致。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过查阅资料得知，可能是因为缺少下载<code>Chromium</code>依赖导致。好在官方给出了各个包的安装方式。</p><pre><code>#依赖库yum install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 -y</code></pre><p>执行完以上，再<code>npm install</code>发现还是报错，如下所示：</p><p><img src="https://user-gold-cdn.xitu.io/2020/2/29/1708fd18d54665b5?w=2658&h=1354&f=png&s=470773" alt=""></p><p>个人初步判断可能是资源下载问题，然后使用淘宝镜像执行<code>cnpm install</code>重试，成功！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2020/02/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/02/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="快速排序采用分治的策略把一个序列list分为两个子序列。"><a href="#快速排序采用分治的策略把一个序列list分为两个子序列。" class="headerlink" title="快速排序采用分治的策略把一个序列list分为两个子序列。"></a>快速排序采用分治的策略把一个序列list分为两个子序列。</h4><p>其步骤为：</p><ol><li>在数列中找到一个基准元素<code>pivot</code></li><li>分区操作：遍历整个数组，将比基准小的元素放在左边，将比基准大的元素放在右边，遍历结束后该基准就处于数列的中间位置。</li><li>重复1和2步骤，递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列重新排序。</li></ol><h4 id="简单的快速排序算法"><a href="#简单的快速排序算法" class="headerlink" title="简单的快速排序算法"></a>简单的快速排序算法</h4><ul><li>先上简单的快速排序算法：<pre><code>  function quickSort(arr) {      if(arr.length &lt; 2) {          return arr;      }      let pivot = arr[0];      let leftArr = [];      let rightArr = [];      for(let i = 1; i &lt; arr.length; i ++) {          if(arr[i] &lt; pivot) {              leftArr.push(arr[i])          } else {              rightArr.push(arr[i])          }      }      return quickSort(leftArr).concat(pivot, quickSort(rightArr));  }</code></pre></li><li>此方法的时间复杂度为O(nlogn), 空间复杂度为O(logn)。</li></ul><h4 id="原地快排"><a href="#原地快排" class="headerlink" title="原地快排"></a>原地快排</h4><p>在列表中操作</p><pre><code>function quickSort(arr, low = 0, high = arr.length - 1) {    if(low &gt;= high) {        return;    }    let left = low;    let right = high;    let temp = arr[left];    while(left &lt; right) {        while(left &lt; right &amp;&amp; arr[right] &gt; temp) {            right --;        }        arr[left] = arr[right];        while(left &lt; right &amp;&amp; arr[left] &lt;= temp) {            left ++;        }        arr[right] = arr[left];    }    arr[left] = temp;    quickSort(arr, low, left - 1);    quickSort(arr, left + 1, high);    return arr;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法和数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Redux的理解</title>
      <link href="/2019/11/30/React-Redux%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/11/30/React-Redux%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h3><ul><li><p>Connect函数会将React组件和Redux的store关联起来，可以方便的获取到store中的数据，并且将组件中的动作传递给store来更改数据。</p></li><li><p>connect并没有改变组件，而是生成新的组件包裹着传进去的组件。</p><pre><code>function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)</code></pre></li><li><p>mapStateToProps?: (state, ownProps?) =&gt; Object<br>通过mapStateToProps将store中的数据传入组件，每当store的state更改，都会调用该函数。</p></li></ul><pre><code>// don&#39;t do this!export default connect(state =&gt; state)(TodoApp)</code></pre><ul><li>mapDispatchToProps?: Object | (dispatch, ownProps?) =&gt; Object</li></ul><p>1、如果该函数只有dispatch一个参数，则通过 dispatch 去将触发的action传给store。</p><pre><code>const mapDispatchToProps = dispatch =&gt; {  return {    // dispatching plain actions    increment: () =&gt; dispatch({ type: &#39;INCREMENT&#39; }),    decrement: () =&gt; dispatch({ type: &#39;DECREMENT&#39; }),    reset: () =&gt; dispatch({ type: &#39;RESET&#39; })  }}</code></pre><p>- </p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx域名解析</title>
      <link href="/2019/10/27/nginx%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/10/27/nginx%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>nginx域名解析 </p><p>查找nginx位置  locate nginx.conf</p><p>1、若两个域名分别指向同一服务器ip的不同端口则需要配置两个server</p><p>在第二个服务中增加proxy_pass 指向对应的端口号即可</p><p>2、nginx -s reload  // 重启nginx</p><p>￼<br><img src="https://user-gold-cdn.xitu.io/2019/10/27/16e0da3f35c24257?w=2346&h=1768&f=png&s=411604" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被誉为神器的requestAnimationFrame</title>
      <link href="/2019/10/27/%E8%A2%AB%E8%AA%89%E4%B8%BA%E7%A5%9E%E5%99%A8%E7%9A%84requestAnimationFrame/"/>
      <url>/2019/10/27/%E8%A2%AB%E8%AA%89%E4%B8%BA%E7%A5%9E%E5%99%A8%E7%9A%84requestAnimationFrame/</url>
      
        <content type="html"><![CDATA[<h3 id="被誉为神器的requestAnimationFrame"><a href="#被誉为神器的requestAnimationFrame" class="headerlink" title="被誉为神器的requestAnimationFrame"></a>被誉为神器的requestAnimationFrame</h3><p> 参考文章<a href="https://www.cnblogs.com/xiaohuochai/p/5777186.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaohuochai/p/5777186.html</a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>与setTimeout和setInterval不同，requestAnimationFrame不需要设置时间间隔。</p><p>setTimeout和setInterval的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行</p><p>requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>requestAnimationFrame会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率</li><li>在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的CPU、GPU和内存使用量</li><li>requestAnimationFrame是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销</li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染机制</title>
      <link href="/2019/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器的渲染机制"><a href="#浏览器的渲染机制" class="headerlink" title="浏览器的渲染机制"></a>浏览器的渲染机制</h2><h3 id="浏览器的渲染机制一般分为以下几个步骤："><a href="#浏览器的渲染机制一般分为以下几个步骤：" class="headerlink" title="浏览器的渲染机制一般分为以下几个步骤："></a>浏览器的渲染机制一般分为以下几个步骤：</h3><ol><li>处理HTML并构建DOM树</li><li>处理CSS并构建CSSOM树</li><li>将DOM和CSSDOM合并成一个渲染树</li><li>根据渲染树来布局，计算每个节点的位置</li><li>调用GPU绘制，合成图层，显示在屏幕上。</li></ol><p><img src="https://i.imgur.com/UkcWpPL.png" alt="渲染机制"></p><blockquote><p>构建CSSOM树是一个非常消耗性能的过程，并且该过程会阻塞渲染，直到CSSOM树构建完成。所以应保证层级扁平，减少过度层叠，越是具体的CSS选择器越消耗性能</p></blockquote><blockquote><p>当HTML解析到<code>script</code>标签时，会暂停构建DOM树，完成后才会从暂停的地方重新开始。也就是说，如果想首屏渲染的越快，越不应该在首屏加载js文件。并且CSS也会影响JS的执行，只有当解析完样式表才会执行JS，所以，也可以认为这种情况下，CSS也会暂停构建DOM。</p></blockquote><h3 id="Load-和-DOMContentLoaded-区别"><a href="#Load-和-DOMContentLoaded-区别" class="headerlink" title="Load 和 DOMＣontentLoaded 区别"></a>Load 和 DOMＣontentLoaded 区别</h3><blockquote><p>Load事件触发代表页面的DOM，CSS，JS，图片已经全部加载完成。</p></blockquote><blockquote><p>DOMContentLoaded事件触发代表初始的HTML被完全加载和解析，不需要等待CSS JS 图片加载。</p></blockquote><h3 id="减少回流和重绘"><a href="#减少回流和重绘" class="headerlink" title="减少回流和重绘"></a>减少回流和重绘</h3><ol><li><p>使用<code>translate</code>替代<code>top</code></p></li><li><p>使用<code>visibility</code>替换<code>display:none</code>,因为前者只会引起重绘，而后者会引起回流(改变布局)</p></li><li><p>把 DOM 离线后修改，比如：先把 DOM 给 display:none (有一次 Reflow)，然后你修改 100 次，然后再把它显示出来</p></li><li><p>不要把 DOM 结点的属性值放在一个循环里当成循环里的变量</p><p> for (let i = 0; i &lt; 1000; i++) {<br>   // 获取 offsetTop 会导致回流，因为需要去获取正确的值<br>   console.log(document.querySelector(‘.test’).style.offsetTop)<br> }</p></li><li><p>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p></li><li><p>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame</p></li><li><p>CSS 选择符从右往左匹配查找，避免 DOM 深度过深</p></li><li><p>将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 video 标签，浏览器会自动将该节点变为图层</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/10/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/10/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h3><ul><li>使用字面量创建，由包含在两斜杠中间的模式组成：<pre><code>var a = /abc+/;</code></pre></li><li>使用<code>RegExp</code>对象的构造函数创建：<pre><code>var a = new RegExp(&#39;abc+&#39;);</code></pre></li></ul><p>1、+匹配1次或多次   *匹配0次或多次   ?匹配0次或1次</p><p>2、\f匹配一个换页符  \n匹配一个换行符  \r匹配一个回车符  .匹配除换行符\n之外的任务单字符</p><p>3、限定符：用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配，有*或+或？或{n}或{n,}或{n,m} 6种。</p><p>4、[标记一个中括号表达式的开始   （）标记一个子表达式开始或结束位置</p><p>5、\b匹配一个单词边界，即字与空格间的位置   \B非单词边界匹配；’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</p><p>6、\w 匹配字母或数字或下划线或汉字</p><p>7、？当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</p><p>8、 [xyz]匹配包含的任意字符，如可以匹配plain中的a； [^xyz]匹配未包含的任意字符</p><h3 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h3><ul><li>数字：^[0-9]*$</li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$</li><li>m-n位的数字：^\d{m,n}$</li><li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li><li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})$</li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</li><li>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</li><li>非负整数：^\d+$ 或 ^[1-9]\d*|0$</li><li>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</li><li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</li><li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*))$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]*.[0-9]+)|([0-9]</em>[1-9][0-9]*)))$</li><li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$<br>校验字符的表达式</li><li>汉字：^[\u4e00-\u9fa5]{0,}$</li><li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</li><li>长度为3-20的所有字符：^.{3,20}$</li><li>由26个英文字母组成的字符串：^[A-Za-z]+$</li><li>由26个大写英文字母组成的字符串：^[A-Z]+$</li><li>由26个小写英文字母组成的字符串：^[a-z]+$</li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li><li>可以输入含有^%&amp;’,;=?$&quot;等字符：[^%&amp;’,;=?$\x22]+</li><li>禁止输入含有<del>的字符：[^</del>\x22]+<br>三、特殊需求表达式</li><li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li><li>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</li><li>InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</li><li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li><li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</li><li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li><li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li><li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li><li>中文字符的正则表达式：[\u4e00-\u9fa5]</li><li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li><li>HTML标记的正则表达式：&lt;(\S<em>?)[^&gt;]</em>&gt;.<em>?|&lt;.</em>? /&gt; ( 首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</li><li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li><li>IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li></ul>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试记录（二）</title>
      <link href="/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-与-XHTML"><a href="#HTML-与-XHTML" class="headerlink" title="HTML 与 XHTML"></a>HTML 与 XHTML</h2><p>##不同点： </p><ol><li>XHTML必须要有根元素；</li><li>XHTML元素必须被正确嵌套；</li><li>XHTML标签名称必须为小写字母；</li><li>XHTML元素必须被关闭；</li></ol><h3 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h3><ol><li>冒泡排序：<br>1、依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。<br>2、 再对最后一位以外的数组，重复前面的过程，直至全部排序完成。<br>2、选择排序：<br>选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。<br>3、 插入排序<br>插入排序（insertion sort）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。<br>4、合并排序：<br>它的基本思想是，将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成n个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。</li><li>快速排序：<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html</a></li></ol><h3 id="两种盒子模型应用场景"><a href="#两种盒子模型应用场景" class="headerlink" title="两种盒子模型应用场景"></a>两种盒子模型应用场景</h3><p>##数组去重<br>1、新建一新数组，遍历传入数组，值不在新数组就push进该新数组中<br>2、给传入数组排序，排序后相同值相邻，</p><ul><li>然后遍历时,新数组只加入不与前一值重复的值。</li><li>会打乱原来数组的顺序</li></ul><p>3、方法的实现代码相当酷炫，</p><ul><li>实现思路：获取没重复的最右一值放入新数组。</li><li>（检测到有重复值时终止当前循环同时进入顶层循环的下一轮判断）*<br>4、hash方法</li></ul><p>二分查找:针对有序数组<br>有重复元素 左右边界问题</p><p>堆排序js代码实现，必须为完全二叉树，大顶堆和小顶堆</p><p>搜索二叉树，</p><p>20190507</p><p>1、new XXX()时具体过程是什么？<br>    第一步，var obj={};创建空对象obj;<br>    第二步，obj.<strong>proto</strong> = Car.prototype;将空对象的<strong>proto</strong>指向构造函数的原型属性，意味着obj的原型属性拥有Car.prototype的属性和方法<br>    第三部，Car.call(obj);将Car中的this指针指向obj，obj有了Car构造函数中的属性和方法。<br>2、<strong>proto</strong>是什么？<br>    每个对象都有一个隐藏属性[[prototype]]，谁创建了该对象，该属性就指向谁的prototype属性，因为是隐藏属性，所以无法访问，有浏览器提供<strong>proto</strong>来访问，而这不是标准方法。ES5中用Object.getPrototype()访问，ES6中使用Object.setPrototypeOf可以修改对象的[[prototype]]；<br>3、Object.create()发生了什么?<br>    创建新对象，并且用现有对象来提供新创建对象的<strong>proto</strong>，关键代码：<br>    Object.create = function(A) {<br>        var F = function () {};<br>        F.prototype = A;<br>        return new F();<br>    }<br>    1. Object.create(o),如果o是一个构造函数，则采用这种方法来创建对像没有意义<br>   2.Object.create(o),如果o是一个字面量对象或实例对象，那么相当于是实现了对象的浅拷贝</p><p>4、字面量创建对象，不会调用Object()构造函数，简洁且性能良好。<br>new Object() 方式创建对象本质上是方法调用，涉及到在proto链中遍历该方法，当找到该方法后，又会生产方法调用必须的 堆栈信息，方法调用结束后，还要释放该堆栈，性能不如字面量的方式。</p><p>20190509<br>1、this永远指向最后调用它的那个对象。<br>2、改变this指向的方法：</p><ul><li>使用ES6的箭头函数，箭头函数始终指向函数定义时的this，而非执行时。箭头函数没有this绑定，必须通过查找作用域来决定其值，使用箭头函数被非箭头函数包含，则this绑定的是最近一层非箭头函数的this，否则this为undefined.</li><li>在函数中使用_this = this;</li><li>使用apply/call/bind等函数，改变this指向</li><li>new实例化一个对象<br>3、apply和call均为调用一个函数，其具有一指定this值和参数。apply为数组或类数组做参数，call为若干个参数列表<br>4、bind为新建一个函数，当被调用时将其this指定为特定对象<br>5、函数调用的4中方法：</li><li>作为一个函数调用</li><li>函数作为方法调用</li><li>使用构造函数调用函数</li><li>作为函数方法调用函数(apply/call)</li></ul><p>6、说说从输入URL到看到页面发生的全过程，越详细越好。</p><ol><li>首先浏览器主进程接管，开了一个下载线程。</li><li>然后进行HTTP请求（DNS查询、IP寻址等等），中间会有三次捂手，等待响应，开始下载响应报文。</li><li>将下载完的内容转交给Renderer进程管理。</li><li>Renderer进程开始解析css rule tree和dom tree，这两个过程是并行的，所以一般我会把link标签放在页面顶部。</li><li>解析绘制过程中，当浏览器遇到link标签或者script、img等标签，浏览器会去下载这些内容，遇到时候缓存的使用缓存，不适用缓存的重新下载资源。</li><li>css rule tree和dom tree生成完了之后，开始合成render tree，这个时候浏览器会进行layout，开始计算每一个节点的位置，然后进行绘制。</li><li>绘制结束后，关闭TCP连接，过程有四次挥手。。</li></ol><p><a href="https://www.cnblogs.com/daijinxue/p/6640153.html" target="_blank" rel="noopener">https://www.cnblogs.com/daijinxue/p/6640153.html</a></p><p>更详细版本：</p><ol><li>DNS域名解析 例如<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>1)   chrome浏览器会搜索浏览器自身的DNS缓存，时间比较短大概1分钟，且内容1000条，看是否有命中且没过期，如果有则解析到此结束。  chrome://net-internals/#dns<br>2)   如果浏览器没有，则会查找操作系统中DNS缓存，如果有且没过期则命中缓存。 windows下 cmd中  ipconfig /displaydns<br>3)   如果windows系统中没有找到dns缓存，则会尝试读取host文件，看里面有没有对应的ip，有的解析成功<br>4） 如果没有，则发送域名解析请求到本地配置的首选dns服务器（一般由电信运营商提供，通过udp向dns的53端口递归请求，也就是运营商服务器必须提供域名对应的ip）。  DNS服务器首先查找自身缓存，如有且没过期则返回。如没有则有DNS服务器代我们浏览器发送DNS解析请求，首先查找根域DNS地址向其发送请求(请问<a href="http://www.baidu.com的ip是多少)，根域发现此为顶级域com下的ip，会向运行商DNS服务器返回com域的ip地址。于是运营商DNS又向com域的ip地址发送请求，返回baidu.com的ip地址，然后运营商DNS再次向baidu.com的ip发送请求，最终得到ip地址。" target="_blank" rel="noopener">www.baidu.com的ip是多少)，根域发现此为顶级域com下的ip，会向运行商DNS服务器返回com域的ip地址。于是运营商DNS又向com域的ip地址发送请求，返回baidu.com的ip地址，然后运营商DNS再次向baidu.com的ip发送请求，最终得到ip地址。</a><pre><code> 2. 发起TCP三次握手请求 3. 发送http请求 4、服务器响应请求，浏览器得到html资源 5、浏览器解析html，并请求html代码中的资源 6、浏览器对页面进行渲染：详细点</code></pre></li></ol><p>1xx: 信息性状态码<br>    100, 101<br>2xx: 成功状态码<br>    200：OK<br>3xx: 重定向状态码<br>    301: 永久重定向, Location响应首部的值仍为当前URL，因此为隐藏重定向;<br>    302: 临时重定向，显式重定向, Location响应首部的值为新的URL<br>    304：Not Modified  未修改，比如本地缓存的资源文件和服务器上比较时，发现并没有修改，服务器返回一个304状态码，<br>                        告诉浏览器，你不用请求该资源，直接使用本地的资源即可。<br>4xx: 客户端错误状态码<br>    404: Not Found  请求的URL资源并不存在<br>5xx: 服务器端错误状态码<br>    500: Internal Server Error  服务器内部错误<br>    502: Bad Gateway  前面代理服务器联系不到后端的服务器时出现<br>    504：Gateway Timeout  这个是代理能联系到后端的服务器，但是后端的服务器在规定的时间内没有给代理服务器响应</p><p>20190510<br>1、HTTP、TCP分别在网络协议哪一层？</p><p>数据链路层：打包数据<br>网络层：路由器，高效安全的寻找路径</p><p>UDP 用户数据包协议: </p><ul><li>大小控制在64KB以内，只管发送，不确认对方是否接受成功 </li><li>将数据及源和目的封装成数据包中，不需要建立连接，速度快</li><li>网络流媒体/游戏<br>TCP 传输控制协议:</li><li>建立连接，进行大数据传输，数据大小不受限制</li><li>三次握手建立连接、四次挥手建立连接</li></ul><p>网络通讯三要素：IP地址、端口号、传输协议（通讯的规则）TCP/UDP</p><p>20190511<br>1、this、super</p><ul><li>this关键词指向函数所在的当前对象</li><li>super指向当前对象的原型对象</li><li>Class中的super()，表示父类的构造函数，用来新建父类的this对象，super()相当于Parent.prototype.constructor.call(this);</li><li>子类没有自己的this对象，而是继承父类的this对象，然后进行加工。如果不调用super，子类就得不到this对象</li><li>ES5的继承，实质上是先创建子类的实例对象this，然后再将父类的方法添加到this上(Parent.call(this))</li><li>ES6的继承，需要先创建父类的this，子类调用super继承父类的this，然后再加工。</li><li>super 在静态方法之中指向父类，在普通方法之中指向父类的原型对象</li></ul><p>2、高阶组建应用场景：多个组件都需要做有些相同的操作</p><p>3、无状态组件： 无状态的函数创建的组件是无状态组件，它是一种只负责展示的纯组件，它的特点是不需要管理状态state，数据直接通过props传入，这也符合 React 单向数据流的思想。</p><p>4、 js中创建函数有两种方式：函数声明式和函数字面量式。只有函数声明才存在函数提升！<br>    变量提升缺陷：相同变量名覆盖、循环中有定时器操作，最终打印出一个最终值</p><p>5、 闭包就是能够读取其他函数内部变量的函数， 闭包就是将函数内部和函数外部连接起来的一座桥梁。 它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时<br>就产生了闭包</p><p>6、使cookie不被js操作的方法，设置cookie属性为 HttpOnly</p><p>20190511-下午<br>缓存策略  <a href="http://www.cnblogs.com/lyzg/p/5125934.html#_label0" target="_blank" rel="noopener">http://www.cnblogs.com/lyzg/p/5125934.html#_label0</a><br>1、浏览器强缓存策略</p><ul><li>Expires为http1.0提出，在服务器返回数据的header中，为绝对时间，由于服务器和浏览器时间可能会有差异导致缓存失败</li><li>基于以上，http1.1提出新的缓存策略cache-control，以秒为单位，如Cache-Control:max-age=315360000,为相对时间，在进行缓存命中的时候都是用客户端时间，该缓存策略更有效安全。</li><li>Expires和Cache-Control两种如同时存在，有限Cache-Control</li><li>在开发的时候不会专门去配置强缓存，而浏览器又默认会缓存图片，css和js等静态资源<br>2、—协商缓存原理</li><li>当浏览器没有命中强缓存，会向服务器发送一个请求，验证协商缓存是否命中，如果命中则返回304并会显示为Not Modified的status</li><li>Last-Modified和If-Modified-Since: 浏览器第一次请求时，服务器返回的header中会带Last-Modified字段表示最后修改的时间，该时间为服务器时间，当下次浏览器请求资源时，在请求header中会带上该时间点叫做If-Modified-Since，这时服务器会拿此时间与该资源的最后修改时间对比，如一致则返回304 Not Modified，此时返回体header中不会带Last-Modified；如不一致，则返回最新的资源。</li><li>Last-Modified和If-Modified-Since一般是非常可靠的，但有时服务器上资源有变化，但是Last-Modified没有更改，会导致出现问题，此时ETag和If-None-Match登场了。</li><li>ETag和If-None-Match缓存策略和Last-Modified、If-Modified-Since基本一致，不同的是ETag是服务器根据当前资源生成的唯一标志，只要资源变化ETage肯定改变，而Last-Modified不一定改变。再浏览器第二次请求时，服务器会根据现有资源重新生成ETag与资源请求中的If-None-Match对比，一致则返回304，并且在相应体header中带有重新生成的ETag。</li><li>注意的地方：【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】一般都是同时启用，这是为了处理Last-Modified不可靠的情况。有一种场景需要注意：分布式系统里多台机器间文件的Last-Modified必须保持一致，以免负载均衡到不同机器导致比对失败；分布式系统尽量关闭掉ETag(每台机器生成的ETag都会不一样）；<br>3、CDN缓存– 内容分发网络Content Delivery Network</li><li>CND解决了跨运营商和跨区域的问题，访问延时大大降低。</li><li>大部分请求都是在CDN边缘节点完成，CDN起到了分流作用，减轻了源站的压力</li></ul><p>晚上</p><p><a href="https://www.cnblogs.com/slly/p/6640761.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6640761.html</a><br>http获取html资源后的过程，经典！</p><p>CDN技术详解 <a href="https://www.cnblogs.com/losbyday/p/5843960.html" target="_blank" rel="noopener">https://www.cnblogs.com/losbyday/p/5843960.html</a></p><p>1、React生命周期函数</p><ul><li>render函数，创建virtue dom，进行diff算法，更新dom 树都在此进行。</li><li>tree diff 也叫层级diff:   diff只对同层级进行比较</li><li>component diff: 如果由于某些条件由A组建变为了B组建，则此时比较两组件是否为同一类型，如果不是则diff比较耗性能，直接删掉上一个虚拟dom创建新的。如果是同类型，则按照层级策略进行深度比较每个节点</li><li>element diff： 对同一层级的遍历节点，通过key来辅助比较。<br>2、虚拟dom</li><li>虚拟dom可以对js操作dom这一部分进行优化。比如把dom list元素1，2，3改为4，5，6，7。一般dom操作为先删除这些element再创建，共7步。而virtue dom会更高1，2，3的innerHtml为4，5，6，再添加7，共4步。</li><li>虚拟dom与dom并非完全一致，而是保留了element的一些层级关系和基本属性，所以虚拟dom的创建删除等还是非常快的。React根据传入的数据，生成全新虚拟dom与原虚拟dom进行diff算法，得到patch，然后把patch打到浏览器dom中，这里的patch并不是完整的虚拟dom，而是差异化的部分。</li><li>为什么虚拟dom快？ 每次生成虚拟dom很快，diff生成patch也很快，而对dom进行patch时虽dom变更比较慢，但是React根据Patch内容优化了一部分dom操作。重点就在最后，哪怕是我生成了virtual dom(需要耗费时间)，哪怕是我跑了diff（还需要花时间），但是我根据patch简化了那些DOM操作省下来的时间依然很可观（这个就是时间差的问题了，即节省下来的时间 &gt; 生成 virtual dom的时间 + diff时间）<br>3、虽说单向数据流，但实际上是单向的observer, Store-&gt;View-&gt;Action-&gt;Store。可以理解为View监听Store，View触发Action， Store监听Action。<br>4、diff算法关键点</li><li>dom树的信息结构可以用js对象很容易表示出来，相对于dom对象，原生js对象处理起来更快更简单。</li><li>用js对象树状结构去构建一个真正的dom树，插入到文档中。虚拟dom本质是在js和dom之间做了一个缓存。</li><li>深度优先遍历，记录差异<br>5、Redux三个基本原则</li><li>单一数据源</li><li>状态是只读的</li><li>状态修改均由纯函数完成<br>6、Redux</li><li><Provider />接受store作为props,是整个React应用的顶层组件，而connect()提供了在整个React应用的任意组件获取store中数据的可能。</li></ul><p>7、Express中间件 机制 <a href="https://segmentfault.com/a/1190000010877994" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010877994</a><br>    中间件功能包括：中间件就是在请求和响应过程之间提供修改内容的机会。</p><ul><li>执行任何代码。</li><li>修改请求和响应对象。</li><li>终结请求-响应循环。</li><li>调用堆栈中的下一个中间件<br>  app.use将要执行的函数放入待执行函数数组中，而next()为将从待执行函数数组队列中取出去执行。</li></ul><p>20190512<br>1.generator函数是一个状态机，内部封装了多个内部状态<br>2.执行generator函数返回一个遍历器对象，也就是说generator函数除了状态机还是一个遍历器对象生成函数。</p><p>20190513<br>1、CSRF 跨站请求伪造预防：</p><ul><li>根据HTTP协议,在http请求头中包含一个referer的字段,这个字段记录了该http请求的原地址.通常情况下,执行转账操作的post请求<a href="http://www.bank.com/transfer.php应该是点击www.bank.com网页的按钮来触发的操作,这个时候转账请求的referer应该是www.bank.com.而如果黑客要进行csrf攻击,只能在自己的网站www.hacker.com上伪造请求.伪造请求的referer是www.hacker.com.所以我们通过对比post请求的referer是不是www.bank.com就可以判断请求是否合法.这种方式验证比较简单,网站开发者只要在post请求之前检查referer就可以,但是由于referer是由浏览器提供的.虽然http协议有要求不能篡改referer的值.但是一个网站的安全性绝对不能交由其他人员来保证" target="_blank" rel="noopener">www.bank.com/transfer.php应该是点击www.bank.com网页的按钮来触发的操作,这个时候转账请求的referer应该是www.bank.com.而如果黑客要进行csrf攻击,只能在自己的网站www.hacker.com上伪造请求.伪造请求的referer是www.hacker.com.所以我们通过对比post请求的referer是不是www.bank.com就可以判断请求是否合法.这种方式验证比较简单,网站开发者只要在post请求之前检查referer就可以,但是由于referer是由浏览器提供的.虽然http协议有要求不能篡改referer的值.但是一个网站的安全性绝对不能交由其他人员来保证</a>.</li><li>每次进入页面由服务端下发一个token</li></ul><p>2、promise 、 async 和 setTimeOut 执行顺序<br><a href="https://segmentfault.com/a/1190000015057278" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015057278</a></p><p>20190514<br>1、HTTP与HTTPS<br>HTTPS主要作用：</p><ul><li>对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全</li><li>对网站服务器进行真实身份认证<br>HTTP存在的问题：</li><li>通信使用明文，内容可能被窃听</li><li>无法保证报文的完整性，所以可能被篡改</li><li>不验证通信方的身份，有可能遭遇伪装<br>HTTPS的优势：</li><li>数据隐私性：内容经过对称加密，每个连接生成一个唯一的加密密钥；</li><li>数据完整性：内容传输经过完整性校验；</li><li>身份认证：第三方无法伪造服务端（客户端）身份；</li></ul><p>HTTPS协议主要功能基本依赖于TLS/SSL协议，TLS/SSL的功能主要依赖于三类基本算法：散列函数、对称加密、非对称加密。利用非对称加密实现身份认证和密钥协商，对称加密采用协商的密钥对数据加密，基于散列函数验证身份的完整性。<br>对称加密：密钥传输过程中容易被劫持篡改，非对称加密：对数据加解密耗时长<br>HTTPS采用对称加密+非对称加密，发送密文的一方使用对方的公钥加密处理”对称的密钥”，然后对方用自己的私钥解密拿到”对称的密钥”，这样确保密钥是安全的前提下使用对称加密的方式进行通信。</p><p>HTTP1.0 1.1 2.0<br>HTTP1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection: keep alive，在一定程度上弥补了HTTP1.0每次请求都要建立连接的缺点。<br>HTTP2.0相对于HTTP1.1:</p><ul><li>新的二进制格式：HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</li><li>多路复用：即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</li><li>header压缩：HTTP1.X的header中带有大量信息，每次重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</li><li>服务端推送：在客户端请求css文件时，服务端相应的也推送了js文件，在客户端再获取js文件时只需从缓存获取即可</li></ul><p>HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别？</p><ul><li>HTTP/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</li><li>HTTP/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</li><li>HTTP/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</li></ul><p>Promise<br>手写promise  <a href="https://yq.aliyun.com/articles/613412" target="_blank" rel="noopener">https://yq.aliyun.com/articles/613412</a></p><ul><li>对象的状态不受外界影响</li><li>一旦状态改变，就不会再变</li></ul><p>async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作.<br>async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p><p>AJAX:<br>const client = new XMLHttpRequest();<br>client.open(“GET”, url);<br>client.onreadystatechange = handler;<br>client.responseType = “json”;<br>client.setRequestHeader(“Accept”, “application/json”);<br>client.send();</p><p>MVC/MVVM:</p><ul><li>MVVM(Model-View-ViewModel), 源自于经典的 Model–View–Controller（MVC）模式。MVVM 的出现促进了 GUI 前端开发与后端业务逻辑的分离，极大地提高了前端开发效率。MVVM 的核心是 ViewModel 层，它就像是一个中转站（value converter），负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向数据绑定，向下与 Model 层通过接口请求进行数据交互，起呈上启下作用。View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的最重要一环。</li></ul><p>20190516<br>1、React Fiber是基于链表实现的，目的其实是为了解决 react 在执行的时候是无法停下来的，需要一口气执行完的问题的。   fiber 之前的问题，就是 react 会阻止优先级高的代码（比如用户输入）执行。因此 fiber 打算自己自建一个虚拟执行栈来解决这个问题，这个虚拟执行栈的实现是链表。<br>Fiber 的基本原理是将协调过程分成小块，一次执行一块，然乎将运算结果保存起来，并判断是否有时间（react 自己实现了一个类似 requestIdleCallback 的功能）继续执行下一块。 如果有时间，则继续。 否则跳出，让浏览器主线程歇一会，执行别的优先级高的代码。<br>当协调过程完成（所有的小块都运算完毕）， 那么就会进入提交阶段， 真正的进行副作用（side effect）操作，比如更新DOM，这个过程是没有办法取消的，原因就是这部分有副作用。<br>问题的关键就是将协调的过程划分为一块块的，最后还可以合并到一起，有点像Map／Reduce。<br>React 必须重新实现遍历树的算法，从依赖于内置堆栈的同步递归模型，变为具有链表和指针的异步模型。<br>2、 树：所谓的前中后指的是根节点的位置，其他位置按照先左后右排列即可。 比如前序遍历就是根左右, 中序就是左根右，后序就是左右根</p><p>20190521<br>1、 undefined是访问一个未初始化的变量时返回的值，而null是访问一个尚未存在的对象时所返回的值。因此，可以把undefined看作是空的变量，而null看作是空的对象。<br>2、 捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)<br>冒泡型事件：事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。<br>event.stopPropagation() 则只阻止事件往上冒泡，不阻止事件本身。<br>stopImmediatePropagation包含了stopPropagation的功能，即阻止事件传播（捕获或冒泡），但同时也阻止该元素上后来绑定的事件处理程序被调用，</p><p>c.addEventListener(“click”, function (event) {<br>console.log(“c1”);<br>// 注意第三个参数没有传进 false , 因为默认传进来的是 false<br>//，代表冒泡阶段调用，个人认为处于目标阶段也会调用的<br>});</p><p><a href="https://segmentfault.com/a/1190000012729080" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012729080</a></p><p>3、事件委托： 事件委托，委托它们父级代为执行事件。 当用事件委托的时候，根本就不需要去遍历元素的子节点，只需要给父级元素添加事件就好了，其他的都是在js里面的执行，这样可以大大的减少dom操作，这才是事件委托的精髓所在<br>window.onload = function(){<br>　　var oUl = document.getElementById(“ul1”);<br>　　oUl.onclick = function(ev){<br>　　　　var ev = ev || window.event;<br>　　　　var target = ev.target || ev.srcElement;<br>　　　　if(target.nodeName.toLowerCase() == ‘li’){<br>　 　　　　　　 alert(123);<br>　　　　　　　  alert(target.innerHTML);<br>　　　　}<br>　　}<br>}</p><p>  <a href="https://www.cnblogs.com/liugang-vip/p/5616484.html" target="_blank" rel="noopener">https://www.cnblogs.com/liugang-vip/p/5616484.html</a></p><p>20190701<br>1、express和koa<br><a href="https://www.jianshu.com/p/6f7930687835" target="_blank" rel="noopener">https://www.jianshu.com/p/6f7930687835</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试记录（三）</title>
      <link href="/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>前端复习题<br>github:<br><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers" target="_blank" rel="noopener">https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers</a></p><p>算法与数据结构整理：<br><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md</a></p><p>面试中的题：<br>1、html、css和浏览器<br>2、块级元素、行内元素、（非）替换元素<br>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。比如：<input /> type=”text” 的是，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样。(X)HTML中的<img>、<input>、<textarea>、<select>、<object>都是替换元素，这些元素都没有实际的内容。<br>非替换元素：(X)HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。 比如<p>wanmei.com</p><br>3、innerHTML、innerText和outerHTML、outerText的区别<br>1）innerHTML、outerHTML在设置对象内容时包含的html会被解析，而innerText和outerText则不会。2）在设置时，innerHTML和innerText仅设置标签内的文本，而outerHTML和outerText设置包含标签在内的文本。<br>4、css3用AnimationEnd判断动画是否完成， css3在动画完成后执行事件<br>5、http(s),浏览器 — 见面试笔记<br>6、为什么排版引擎解析 CSS 选择器时一定要从右往左解析？<br>1）从左往右查找的话每次都要遍历所有的css dom规则才行，而从右往左从子元素向上遍历可以省掉很多不需要的css rule遍历；2）从右往左进行解析还有一个好处那就是从右往左进行匹配的时候，匹配的全部是DOM元素的父节点，而从左往右进行匹配的时候时候，匹配的全部是DOM元素的子节点，这样就避免了HTML与CSS没有下载完需要进行等待的情形。<br>7、浏览器渲染原理及流程  <a href="https://www.cnblogs.com/slly/p/6640761.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6640761.html</a></p><ol><li>浏览器将HTML解析成Dom Tree，Dom Tree的构建过程是一个深度遍历的过程，只有将当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点</li><li>将CSS解析成CSS Rule Tree</li><li>将Dom Tree和CSS Rule Tree构建成Rendering Tree。Rendering Tree 渲染树并不等同于Dom Tree，因为像header 或 display:none等没必要在渲染树中</li><li>构建好Rend Tree后，浏览器就知道网页中有哪些节点，各节点css规则以及各节点从属关系和，之后进行layout，计算各节点在屏幕中的位置</li><li>重绘，即遍历Rend Tree，并使用UI后端层绘制每个节点<pre><code> 注意：为了更好用户体验，渲染引擎不会等所有HTML都解析完成后才去构建和布局render树，它是解析完一部分内容就会去显示一部分，同时可能还在通过网络下载其他内容。</code></pre>8、 浏览器cache策略实现的原理（200、304返回码含义  – 见面试笔记<br>9、常见的web攻击手段：</li></ol><ul><li>XSS 跨站脚本攻击  存储型XSS、反射型XSS</li><li>CSRF 跨站请求伪造<br>js<br>1、javascript中的基本数据类型以及类型检测的几种方法？ </li></ul><ol><li><p>typeof   可以对基本数据类型进行判断，但对引用数据类型不起作用(typeof {} 为 object) </p><ol start="2"><li>instanceof   判断是否为原型属性   instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</li></ol></li></ol><pre><code>    3.  constructor   f.constructor == F;   null 和undefined是无效的对象，因此不会有construct存在的，因此需要用其他方法判断。 函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object    4.  toString()   其为Object的原型方法，调用时默认返回当前对象的[[Class]]，内部属性，格式为[[object xxx]]，其中xxx就是对象的属性        Object.prototype.toString.call(window)； // [object Window]  在chrome浏览器中实验</code></pre><p><a href="https://www.cnblogs.com/onepixel/p/5126046.html" target="_blank" rel="noopener">https://www.cnblogs.com/onepixel/p/5126046.html</a>  文章链接</p><p>2、JS中的call、apply、bind方法的用法和区别</p><ul><li>call()、apply()和bind()都是用来改变函数执行时的上下文，可借助它们实现继承；</li><li>call()和apply()唯一区别是参数不一样，call()是apply()的语法糖；</li><li>bind()是返回一个新函数，供以后调用，而apply()和call()是立即调用。<br>3、事件DOMContentLoaded和load的区别<br>DOMContentLoaded浏览器解析完文档时会触发，而不需要图片等其他资源加载完成。而load是在页面上的所有资源(图片、音频、视频)都加载完才会触发，简单说Load事件在DOMContentLoaded事件之后。而jQuery常用的$(document).ready(function(){})就是监听DOMContentLoaded事件，而$(document).load(function(){})事件是监听load事件。<br><a href="https://www.cnblogs.com/caizhenbo/p/6679478.html" target="_blank" rel="noopener">https://www.cnblogs.com/caizhenbo/p/6679478.html</a><br>4、js的变量提升和函数提升<br>变量提升只是提升变量声明，变量赋值不提升<br>5、深入理解ES6箭头函数的this以及各类this面试题总结<br><a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">https://juejin.im/post/59bfe84351882531b730bac2</a><br>6、Javascript实现继承的6种方式</li><li>类式继承：将父类对象的实例 赋值给子类的原型，则子类的原型可以访问父类原型上的属性和方法，以及父类构造函数中复制的属性和方法。Child.prototype = new Parent(); Child.prototype.constructor = Chile; 缺点：1、想要在子类新增属性和方法必须在new之后执行2、无法实现多继承3、来自原型对象上的所有属性被所有实例共享</li><li>构造函数式继承：通过在子类的构造函数中执行一次父类的构造函数实现。SuperClass.call(this,id)是构造函数式继承的中心。缺点：1、只能继承父类的实例属性和方法，不能继承原型属性和方法.2、无法实现函数复用，每个子类都有父类实例的副本，影响性能3、实例并不是父类的实例而是子类的实例</li><li>组合式继承：父类的构造函数执行了两遍：一次在子类的构造函数中call方法执行一遍，一次在子类原型实例化父类的时候执行一遍。组合式继承是比较常用的一种继承方法，其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承</li><li>原型式继承：对类式继承的封装，过渡对象相当于子类</li><li>寄生式继承</li><li>寄生组合式继承：寄生式继承和构造函数式继承结合使用。<br><a href="https://zhuanlan.zhihu.com/p/25578222" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25578222</a><br><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html</a><br>7、前端常见跨域解决方案（全）<br><a href="https://juejin.im/post/5a2f92c65188253e2470f16d" target="_blank" rel="noopener">https://juejin.im/post/5a2f92c65188253e2470f16d</a><br>8、JS中decodeURI()与decodeURIComponent()区别<br>它们是用特殊的UTF-8编码替换无效的字符，如空格，从而让浏览器接受和理解。encodeURI会对整个URI进行编码，而不会对URI的特殊字符(如冒号、正斜杠、问好、井字号)进行编码，会对空格编码。而encodeURIComponent会对URI中某一段编码，会对它发现的任何非标准字符进行编码</li></ul><p>9、什么是闭包？闭包的特性是什么？为啥要用闭包？ — 面试笔记<br>10、跨页面通信的各种姿势<br><a href="https://juejin.im/post/59bb7080518825396f4f5177" target="_blank" rel="noopener">https://juejin.im/post/59bb7080518825396f4f5177</a><br>11、关于js事件捕获的用法： element.addEventListener(event，function, useCapture) 中useCapture为false时事件冒泡，为ture时事件捕获。<br>12、事件冒泡的应用场景——事件代理/事件委托<br>13、javascript数组深拷贝的方法</p><ul><li>遍历复制</li><li>slice()    对原数据进行slice(0)</li><li>concat   arrCopy = arr.concat();<br>14、对象深拷贝：</li><li>迭代递归</li><li>序列化反序列化  JSON.parse(JSON.stringfy(obj))，只能深拷贝数组和对象，对于其他类型对象会失真。<br><a href="https://juejin.im/post/5ad6b72f6fb9a028d375ecf6" target="_blank" rel="noopener">https://juejin.im/post/5ad6b72f6fb9a028d375ecf6</a><br>ES6<br>1、Babel是如何读懂JS代码的,并转化 ES5 代码的?</li></ul><ol><li>解析：将代码字符串解析成抽象语法树</li><li>转换：对抽象语法树进行转换操作。如.babelrc中配置的presets和plugins是在该步进行的</li><li>生成：根据变换后的抽象语法树再生成代码字符串<br><a href="https://www.cnblogs.com/tugenhua0707/p/7863616.html" target="_blank" rel="noopener">https://www.cnblogs.com/tugenhua0707/p/7863616.html</a><br>框架<br>算法<br>输入一个整数数组，调整数组顺序使奇数位于偶数前面 JavaScript实现<br>数组去重的四种方法<br>数组去重的推荐写法<br>找出两个数组相同的值<br>输入一个3位数的正整数,反向输出其对应的数.如输入123,输出321</li></ol><p>其他零散的整理：<br>网络 算法 原理  koa和expresse的区别 如何做前端优化，如何利用webpack进行性能优化 call apply bind区别 http2</p><p>适配不同比例屏幕  flex布局计算  float布局  commonjs模块与es6区别<br>call apply bind   原型链继承   native与js 交互方案<br>事件循环机制  函数节流实现   懒加载   redux数据流向<br>react纯组建与普通组建差异  react生命周期</p><p>1.虚拟dom的理解<br>2.单页面与多页面应用对比<br>3.页面性能优化<br>4.css定位方式<br>5.es6新特性<br><a href="https://juejin.im/post/5ca2e1935188254416288eb2" target="_blank" rel="noopener">https://juejin.im/post/5ca2e1935188254416288eb2</a><br>6.this<br>7.箭头函数和普通函数区别<br>8.react性能优化<br>9.react高阶组件<br>10.垂直居中</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试记录（五）</title>
      <link href="/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>1、Position</p><ul><li>static定位：HTML元素的默认值，即没有定位，遵循正常的文档流对象。静态定位的元素不会受top、bottom、left、right影响</li><li>fixed定位：相对于浏览器窗口位置固定，即使窗口滚动也会移动。fixed定位与文档流无关，因此不占据空间，可以与其他元素重叠。</li><li>relative：相对于正常位置的定位。移动相对位置，其原本占据的空间不会改变。</li><li>absolute:相对于最近的已定位父元素。</li></ul><p>2、overflow</p><ul><li>visible:默认值，内容不会裁剪，会呈现在元素框之外</li><li>hidden：内容被裁剪，其余内容不可见</li><li>scroll：内容被裁剪，但浏览器会显示流动条以便查看</li><li>auto：如果内容被裁剪，则浏览器展示滚动条以查看</li><li>inherit：规定 应该从父元素继承overflow属性的值<br>注意：</li><li>overflow值只工作于指定高度的块元素上。</li></ul><p>3、居中</p><ul><li>要水平居中一个元素（如div）,可以使用margin:auto；</li><li>css中很多方法实现垂直居中对齐，</li></ul><p>优先级float  position<br>position为absolute时div和span效果一样</p><p>body元素<br>float不为none<br>overflow不为visible<br>display设置为inline-block table-cell<br>position为 absolute fixed</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试记录（四）</title>
      <link href="/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>1、如何高效的使用缓存</p><p>2、设置缓存的几种方式<br><a href="http://imweb.io/topic/55c6f9bac222e3af6ce235b9" target="_blank" rel="noopener">http://imweb.io/topic/55c6f9bac222e3af6ce235b9</a><br>bind<br> bind与apply、call最大的区别就是：bind不会立即调用，其他两个会立即调用<br> bind调用时创建是一个函数<br>  第一个参数作为this<br>  参数包括,传入的参数和运行函数的参数<br> 3、数组常用方法 <a href="https://www.cnblogs.com/songzk/p/6081883.html" target="_blank" rel="noopener">https://www.cnblogs.com/songzk/p/6081883.html</a><br>4、字符串常用方法<a href="https://www.cnblogs.com/frontendnotes/articles/6432966.html" target="_blank" rel="noopener">https://www.cnblogs.com/frontendnotes/articles/6432966.html</a><br>技术选型考虑的问题<br>职业规划<br>优势<br>Bootstrap的原理<br>现在在关注什么<br>推给我一篇前言的文章<br>https加密的原理是什么<br>页面当中怎么强制使用https：在onload后js检测protocol是否为https不是的话重置<br>meta的常用值： <a href="https://www.cnblogs.com/wangyang108/p/5995379.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangyang108/p/5995379.html</a><br>babel-pollyfill的原理是什么<br>babel-present-env<br>babel-present-2015这些的原理是什么<br>他们之间有什么区别<br>ES6是如何被转化的<br>VR虚拟现实的使用<br>比较各个构建工具的区别<br>expire, maxage的区别<br>层级遍历的算法<br>常见的几种排序方法编写下<br>为什么进行前后端分离<br>不使用全局变量, 怎么实现一个递增计数<br>VUE和React喜欢哪个, 为什么, 重点说出react的优势<br>DI依赖注入</p><p>上线流程是什么<br>那些地方用到的模块的封装<br>class封装<br>代码如何回滚<br>git reset –hard<br>还有其他的什么方法<br>promise的几种状态<br>PC端兼容IE8类似promsie的写法是什么<br>react<br>h函数<br>patch函数<br>cnzz友盟<br>回顾自己的项目用的什么<br>各种打包工具的对比, grunt, gulp, webpack<br>eslint<br>jshint<br>常用的规则<br>defer async<br>websocket配置<br>angular<br>如何上传代码<br>蛇形矩阵 算法<br>回文字符串 算法</p><p>主要使用的是那些技术<br>你们都是兼容那些浏览器</p><p>Promise.all</p><p>HttpCache<br>pwa</p><p>浏览器渲染原理<br>react, vue为什么循环的时候添加一个key</p><p>响应式布局<br>前端优化方案<br>babel原理<br>http加密流程和原理<br>面试题<br>算法复杂度计算<br>跨域请求浏览器是否会拿到请求-响应<br>header头都有哪些<br>cookie<br>边框<br>react的原理和react的生命周期<br>vue的原理和vue的生命周期<br>content-length chunk<br>首屏加载事件<br>性能是怎么界定的<br>http请求<br><a href="https://search.jikexueyuan.com/course/?q=http" target="_blank" rel="noopener">https://search.jikexueyuan.com/course/?q=http</a></p><p>react 返回加括号</p><p>自己写个立方体<br>常用的linux命令<br>postcss作用</p><ul><li>SASS等工具：源代码 -&gt; 生产环境 CSS</li><li>PostCSS：源代码 -&gt; 标准 CSS -&gt; 生产环境 CSS<br>loading加载条 线性渐变<br>什么是POSTCSS<br>postcss less sass区别</li></ul><p>为什么没有父级选择器<br>this 箭头函数<br>带人的能力<br>总体把控的能力<br>公司的项目进行架构分析<br>易读易维护<br>用户体验<br>对前端技术的兴趣, 搜索框的编写<br>动画帧</p><p>react的常见的坑, requrirejs常见的坑<br>ES6<br>dns-prefetch<br>dns预解析<br>类的方法是共用的吗 class 检测<br>日历框的常用API<br>传统的模块化处理方法 requirejs seajs<br>现在的模块化处理方式 es6<br>requirejs编写使用webpack进行打包<br>使用jquery需要自己编写模板<br>使用vue,React不需要编写模板<br>cooKie带点和不带点的区别<br>jquery<br>vue,react.angular<br>linux常用命令<br>跨域请求服务端是否接收到了<br>grid布局三栏布局</p><p>CSS height() innnerHeight outerHeight 位置的区别</p><p>BFC 块级格式化上下文<br> 边距重叠问题的解决<br> BFC的渲染规则[原理]<br> 1.在垂直方向的边距会发生重叠<br> 2.BFC的区域不会与浮动元素的box重叠<br> 3.在页面是一个独立的容易,外边的元素不会影响内部的元素,内部的元素也不会影响外边的元素<br> 4.计算BFC高度的时候,浮动元素也会参与计算<br> 怎么创建BFC<br> 1.overflow:hidden; overflow不为visibile<br> 2.float值不为none<br> 3.postion值不为static和relative<br> 4.display:inline-box,table-cell<br>jquery自定义事件<br>普通的自定义事件<br>document.body body<br>document.documentElement区别 html</p><p>请求行<br>  http方法<br>  协议<br>  地址<br>  版本<br>请求头<br> key,value告诉服务器我要什么内容<br>空行<br> 下一个就不是请求头了,该是请求体了<br>请求体<br>Object.create<br>箭头函数this的指向, 构造函数<br>CSS放在上边<br>reflect.defineproperty返回一个布尔值<br>观察者模式的伪代码<br>React模块化怎么做的<br>setTimeout setInterval<br>react生命周期<br>table布局</p><p>递归算法<br>webpack配置<br>使用的webpack几, 他们之间的差别<br>http三次握手协议<br>http断开挥手协议4次</p><p>色子局部用grid布局试试</p><p>ES6语法<br>算法<br>flex布局</p><p>webpack的引用<br>错误监控<br>怎么准备知道报错的位置,报错内容, 压缩后的代码放在一块儿,会看不出来</p><p>promise-demo<br>sourcemap有几种, 他们是这么使用的</p><p>常见的坑</p><p>那些改变可以引起react组件的变化<br>函数式编程<br>函数式编程常用的库是什么<br>为什么说函数是一等公民<br>柯里化<br>给你一个实际例子, 把一个传统的编程方式转化为函数式编程的方式<br>fetch函数<br>react</p><p>PureRenderMixin<br>你自己的优势<br>编写一个的指令, 项目中用到哪些自定义指令<br>less/sass编写一个循环的函数<br>节流, 防抖设计<br>from memery cache和from disk cache的区别, 怎么使用<br>异步的实现原理<br>原型继承的优缺点<br>构造函数为什么不能使用箭头函数<br>display, visibilty, opacity在reflow, repaint, 事件等等中的却别<br>页面错误监控是这么做的, 有没有第三方插件<br>什么是前置处理器和后置处理器<br>常用的模板有哪些, 自己写一个带循环, 判断的模板处理语言<br>你认为技术专家应该具备哪些技能<br>项目leader主要负责哪些工作<br>如何编写一个框架, 实现对快速变化需求的封装, 使可以不借助前端人员切页面,运营可以通过拖拽的方式自己上线<br>你在用vue/react/angulra/nodejs时遇到的坑是什么, 怎么解决的<br>nodejs常见的中间件有哪些： 自己写中间件<a href="https://www.jianshu.com/p/d89ae79a7750" target="_blank" rel="noopener">https://www.jianshu.com/p/d89ae79a7750</a><br>nodejs的事件队列原理<br>浏览器端的事件队列原理<br>讲一个对你比较有挑战的项目, 怎么做到的<br>如何实现一个兼容AMD,CMD,UMD,ES6,CommonJS的框架, 思路是什么<br>以上几种代码编写的规范和方式, 有什么区别<br>webpack如何抽离公共的页面<br>技术选型的时候考虑的因素有哪些<br>APP端和H5是如何进行工作的,<br>小程序有了解吗, 小程序和H5之间是怎么工作的,让你自己封装会怎么封装<br>前端是否进行过自动化测试, 常用的测试框架有哪些<br>canvas基本API有哪些<br>SVG都有哪些功能<br>canvas和svg的区别是什么<br>用canvas画一幅图,怎么画<br>requirejs,nodejs等模块化是怎么处理的<br>ES6的新特性有哪些, 代理[不是事件代理], 怎么模拟vue,编写vue框架<br>你最近在学什么,<br>为什么离职/跳槽<br>为什么换专业<br>你认为你的技术水平处于哪个阶段<br>你心目中的专家, 大牛应该具备什么特质, 技能<br>如何把控代码的质量, 规范团队中代码的编写质量, 提高工作效率<br>双等号相等转换是怎么进行转化的<br>AOP, IOC是怎么回事<br>jquery,zepto的原理是什么<br>进么进行手机端页面的开发和调试, 看不到报错信息怎么办, 平时你们是怎么调试的<br>在控制台如何查看animation动画, 如何调试动画<br>代码重构的,主要重构哪些问题,<br>参与哪些开源项目, 你在中间担任是工作, 现场看看你做的代码</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试记录（一）</title>
      <link href="/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/10/27/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="面试记录（一）"><a href="#面试记录（一）" class="headerlink" title="面试记录（一）"></a>面试记录（一）</h2><ol><li>快速排序</li><li>深度最优 广度最优</li><li>将一个二叉树遍历写入数组</li><li>双指针</li><li>webpack打包机制 loaders和plugins区别</li><li>node-env写入页面，webpack打包</li><li>object.create与new和字面量有什么区别</li><li>url-router</li><li>字符串中单词逆排序</li><li>https http</li><li>一个大数组，promise遍历依次调用url</li></ol><ol start="4"><li>console.log打印输出</li><li>求数组中，两个值相加为某一固定值，最优解</li><li>src获取图片资源，base64和url各有什么优缺点   http请求-dns解析-cdn缓存-服务器 整个的流程，各个部分可能会面临的问题</li><li>promise async await区别  手写promise 几个状态 then</li><li>div形成三角形  圆形  垂直水平居中</li></ol><p>20190510<br>1、require原理，包加载原理<br>2、express框架和koa框架原理<br>3、中间件实现<br>4、http请求遇到304过程缓存  √<br>5、限制js操作cookie  √<br>6、高阶组件应用场景   √<br>7、react单向数据流<br>8、async怎么实现的同步机制  promise<br>9、Array.sort()实现机制<br>10、react v16新增功能  fiber机制<br>11、http、tcp分别在哪一层  √<br>12、变量提升  闭包   √</p><p>20190511<br>1、promise实现机制<br>2、react生命周期函数，父子组建的生命周期函数过程  √<br>3、webpack打包机制<br>4、浏览器缓存策略                                     √<br>5、浏览器兼容性处理<br>6、js的事件循环机制</p><p>20190513<br>1.字符串取第一个值  concat<br>2.css  子元素不定宽高，水平垂直居中<br>3.三个div不让左右两个影响中间 margin左右各为100<br>4.log顺序问题  await所在的作用域之外不会受await影响<br>5.手写axios axios好处作用  与promise  ajax<br>6.sso单点登录<br>7.csrf预防第一次攻击<br>8.webpack 提高页面性能的方法 减小打包大小  公共文件<br>9.浏览器缓存策略<br>10.co与promise不同  async await<br>11.高并发解决方案<br>12.正则表达式</p><p>看一下tcp选路，nat等知识。</p><p>20190520<br>1、基本数据类型 typeof  instanceof<br>2、闭包<br>3、AMD CMD<br>4、单点登陆、CSRF、<br>5、promise原理<br>6、事件委托<br>7、undefined null</p><p>20190605<br>1、cors跨域<br>2、CSRF 、 XSS 预防措施<br>3、Redux理解<br>4、Express框架用的不爽的地方<br>5、判断数据类型 [Object Object]  原型链<br>6、ES6新特性  let const<br>7、数组去重、数组中为对象去重<br>8、css 三角形  梯形<br>9、css 水平垂直居中<br>10、position几种   <a href="https://blog.csdn.net/weixin_36185028/article/details/52741803" target="_blank" rel="noopener">https://blog.csdn.net/weixin_36185028/article/details/52741803</a></p><p>20190616<br>auth2</p><ol><li>2.vue组件间通信</li><li>谈谈XSS防御，以及Content-Security-Policy细节</li></ol><p>3、原型链和继承<br><a href="https://www.cnblogs.com/codernie/p/9098184.html#home" target="_blank" rel="noopener">https://www.cnblogs.com/codernie/p/9098184.html#home</a></p><p>20190618<br>1、函数式编程：以函数作为基本单元处理业务逻辑，函数既可以作为参数也可以作为返回值，可以把函数理解为某一值到另一个值的映射关系，函数式编程更适合于处理数据，而面向对象编程更适合开发和处理业务性强的业务系统。函数式编程没有副作用，为纯函数。</p><p>20190621</p><ol><li>node的事件循环机制</li><li>flex弹性盒模型</li><li>proxy</li><li>viewport</li><li></li></ol><p>20190702</p><ol><li>node占用内存，怎么维护内存不足</li><li>正则表达式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg知识整理系列(一)</title>
      <link href="/2019/10/27/Egg%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E7%B3%BB%E5%88%97-%E4%B8%80/"/>
      <url>/2019/10/27/Egg%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E7%B3%BB%E5%88%97-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Egg知识整理系列-一"><a href="#Egg知识整理系列-一" class="headerlink" title="Egg知识整理系列(一)"></a>Egg知识整理系列(一)</h2><h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3><p>Koa是由Express框架原班人马打造的全新web框架，与Express风格类似，底层都是沿用同一套Http基础库，但是有几项显著差别：</p><ul><li>Middleware洋葱圈模型：Koa中间件采用洋葱圈模型，所有的请求经过中间件都会执行两次，可以非常方便的实现后置处理逻辑；</li><li>Context：与Express中只有Requese和Response不同，Koa增加了Context作为上下文对象，可以在请求中将相关字段挂载在Context上。</li><li>异常处理：用户可以很方便的自定义错误处理中间件放在其他中间件之前，就可以捕获到异步或同步代码发生的错误。如：<pre class=" language-shell"><code class="language-shell">  async function onerror(ctx, next) {      try {          await next();      } catch (err) {          ctx.app.emit('error', err);          ctx.body = 'server error';          ctx.status = err.status || 500;      }  }</code></pre></li></ul><h3 id="Egg继承Koa"><a href="#Egg继承Koa" class="headerlink" title="Egg继承Koa"></a>Egg继承Koa</h3><p>众所周知，Koa框架是一个极简框架扩展性非常强，而Egg在此基础上做了增强。</p><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>在Egg框架中，可以通过定义<code>app/extend/{application,context,request,response}.js</code>来扩展Koa框架中四个框架的原型，如在<code>app/extend/context.js</code>中定义如下代码：</p><pre class=" language-shell"><code class="language-shell">module.exports = {    get isXXX() {        return xxx;    }}</code></pre><p>在controller.js中，可以利用刚才的定义：</p><pre class=" language-shell"><code class="language-shell">exports.handler = ctx => {  ctx.body = ctx.isXXX ? 'is xxx' : 'is not xxx';};</code></pre><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>Egg提供了更加强大的插件机制，一个插件可以包含：</p><ul><li>extend: 扩展基础对象的上下文，提供各种工具类、属性。</li><li>middleware: 增加一个或多个中间件，提供请求的前置、后置处理逻辑。</li><li>config: 配置各个环境下插件自身的默认配置项。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Source Tree fatal: Authentication failed解决办法</title>
      <link href="/2019/10/27/Mac-Source-Tree-fatal-Authentication-failed%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/10/27/Mac-Source-Tree-fatal-Authentication-failed%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="在git改完密码后，操作SourceTree会出现-Authentication-failed报错，是由sourceTree中保存的密码还是旧密码导致，此时需将SourceTree中的用户删掉，重新输入新的用户名密码即可。"><a href="#在git改完密码后，操作SourceTree会出现-Authentication-failed报错，是由sourceTree中保存的密码还是旧密码导致，此时需将SourceTree中的用户删掉，重新输入新的用户名密码即可。" class="headerlink" title="在git改完密码后，操作SourceTree会出现 Authentication failed报错，是由sourceTree中保存的密码还是旧密码导致，此时需将SourceTree中的用户删掉，重新输入新的用户名密码即可。"></a>在git改完密码后，操作SourceTree会出现 Authentication failed报错，是由sourceTree中保存的密码还是旧密码导致，此时需将SourceTree中的用户删掉，重新输入新的用户名密码即可。</h3><h3 id="分两步："><a href="#分两步：" class="headerlink" title="分两步："></a>分两步：</h3><p>1、点击软件左上角SourceTree -&gt; 偏好设置，如下图所示</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/22/16df3c7955bc3566?w=1306&h=1270&f=png&s=1010207" alt=""></p><p>2、点击弹框右上角“高级”，将下图红框中用户名移除掉即可。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/22/16df3c7de738922d?w=1292&h=1000&f=png&s=600178" alt=""></p><p>大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SourceTree </tag>
            
            <tag> MacBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器中的Event loop 与 Node的 Event loop</title>
      <link href="/2019/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84Event-loop-%E4%B8%8E-Node%E7%9A%84-Event-loop/"/>
      <url>/2019/10/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84Event-loop-%E4%B8%8E-Node%E7%9A%84-Event-loop/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器中的Event-loop-与-Node的-Event-loop"><a href="#浏览器中的Event-loop-与-Node的-Event-loop" class="headerlink" title="浏览器中的Event loop 与 Node的 Event loop##"></a>浏览器中的Event loop 与 Node的 Event loop##</h2><h5 id="参考链接https-yuchengkai-cn-docs-frontend-browser-html-poll"><a href="#参考链接https-yuchengkai-cn-docs-frontend-browser-html-poll" class="headerlink" title="参考链接https://yuchengkai.cn/docs/frontend/browser.html#poll"></a>参考链接<a href="https://yuchengkai.cn/docs/frontend/browser.html#poll" target="_blank" rel="noopener" title="参考链接">https://yuchengkai.cn/docs/frontend/browser.html#poll</a></h5><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ol><li>JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题。</li><li>HTML5 标准规定setTimeout这个函数第二个参数不得小于 4 毫秒，不足会自动增加。</li><li>浏览器正确的一次 Event loop 顺序是这样的<blockquote><p>执行同步代码，这属于宏任务。</p><p>执行栈为空，查询是否有微任务需要执行</p><p>执行所有微任务</p><p>必要的话渲染 UI</p><p>然后开始下一轮 Event loop，执行宏任务中的异步代码</p></blockquote><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><img src="https://user-gold-cdn.xitu.io/2019/1/13/1684523ab43808ad?w=440&h=417&f=png&s=9529" alt="Node Event Loop"></li></ol><h4 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h4><p>timers 阶段会执行 setTimeout 和 setInterval</p><p>一个 timer 指定的时间并不是准确时间，而是在达到这个时间后尽快执行回调，可能会因为系统正在执行别的事务而延迟。</p><p>下限的时间有一个范围：[1, 2147483647] ，如果设定的时间不在这个范围，将被设置为 1。</p><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h4><p>I/O 阶段会执行除了 close 事件，定时器和 setImmediate 的回调</p><h4 id="idle-prepare"><a href="#idle-prepare" class="headerlink" title="idle, prepare"></a>idle, prepare</h4><p>idle, prepare 阶段内部实现</p><h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><p>poll 阶段很重要，这一阶段中，系统会做两件事情</p><p>执行到点的定时器<br>执行 poll 队列中的事件<br>并且当 poll 中没有定时器的情况下，会发现以下两件事情</p><p>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者系统限制<br>如果 poll 队列为空，会有两件事发生<br>如果有 setImmediate 需要执行，poll 阶段会停止并且进入到 check 阶段执行 setImmediate<br>如果没有 setImmediate 需要执行，会等待回调被加入到队列中并立即执行回调<br>如果有别的定时器需要被执行，会回到 timer 阶段执行回调。</p><h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><p>check 阶段执行 setImmediate</p><h4 id="close-callbacks"><a href="#close-callbacks" class="headerlink" title="close callbacks"></a>close callbacks</h4><p>close callbacks 阶段执行 close 事件</p><p>并且在 Node 中，有些情况下的定时器执行顺序是随机的</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署NodeJs实践（二、部署images和容器）</title>
      <link href="/2019/10/27/Docker%E9%83%A8%E7%BD%B2NodeJs%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%E3%80%81%E9%83%A8%E7%BD%B2images%E5%92%8C%E5%AE%B9%E5%99%A8%EF%BC%89/"/>
      <url>/2019/10/27/Docker%E9%83%A8%E7%BD%B2NodeJs%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%E3%80%81%E9%83%A8%E7%BD%B2images%E5%92%8C%E5%AE%B9%E5%99%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>本NodeJs工程基于node-v8的docker镜像版本。</p><h2 id="1、Dockerfile文件"><a href="#1、Dockerfile文件" class="headerlink" title="1、Dockerfile文件"></a>1、Dockerfile文件</h2><p>首先，在node工程的根目录创建Dockerfile文件，该文件是node工程中对docker的配置文件。</p><p>1、创建Dcokerfile文件</p><pre><code>vi Dockerfile</code></pre><p>2、编写文件内容如下：</p><pre><code>#node镜像版本FROM node:8-alpine#声明作者MAINTAINER LIU#在image中创建文件夹RUN mkdir -p /home/Service#将该文件夹作为工作目录WORKDIR /home/Service# 将node工程下所有文件拷贝到Image下的文件夹中COPY . /home/Service#使用RUN命令执行npm install安装工程依赖库RUN npm install#暴露给主机的端口号EXPOSE 8888#执行npm start命令，启动Node工程CMD [ "npm", "start" ]</code></pre><h2 id="2、构建image"><a href="#2、构建image" class="headerlink" title="2、构建image"></a>2、构建image</h2><p>执行命令<code>docker build -t node-app:v1 .</code>&nbsp;需要注意v1后面还有一个<code>.</code><br /><br>其中 -t node-app:v1 为构建的镜像名称及标签</p><pre><code>[root@localhost test1]# docker build -t node-app:v1 .Sending build context to Docker daemon 4.096 kBStep 1/8 : FROM node:8-alpine ---> dd574b216ad7Step 2/8 : MAINTAINER LIU ---> Using cache ---> f3f22f068507Step 3/8 : RUN mkdir -p /home/Service ---> Using cache ---> 2222ce103ae1Step 4/8 : WORKDIR /home/Service ---> Using cache ---> e60fd914f709Step 5/8 : COPY . /home/Service ---> Using cache ---> 58000275f835Step 6/8 : RUN npm install ---> Using cache ---> e66dc16c44f4Step 7/8 : EXPOSE 8888 ---> Using cache ---> 2adff3739104Step 8/8 : CMD npm start ---> Using cache ---> 190fba2814a6Successfully built 190fba2814a6</code></pre><p>查看生成的image: <code>docker images</code>命令</p><pre><code>[root@localhost test1]# docker imagesREPOSITORY              TAG                 IMAGE ID            CREATED             SIZEnode-app                v1                  190fba2814a6        2 months ago        71 MB</code></pre><h2 id="3、运行container"><a href="#3、运行container" class="headerlink" title="3、运行container"></a>3、运行container</h2><blockquote><p>执行命令 <code>docker run -d -p 8888:8888 190f</code> <br /><br>其中， -d表示在容器后台运行，-p表示端口映射，将本机的8888端口映射到container的8888端口，外网访问本机的8888端口即可访问container。190f为生成的IMAGE的ID,只需要写入对应ID的前几位系统能辨识出对应的image即可。</p></blockquote><pre><code>[root@localhost test1]# docker run -d -p 8888:8888 190f1b335de60ff4ad0f75aa6c4458d4e91cc3839f6e606c5b09ff926bcebd6c9770</code></pre><blockquote><p>执行命令<code>docker ps</code>查看container是否运行</p></blockquote><pre><code>[root@localhost test1]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES1b335de60ff4        190f                &quot;npm start&quot;         4 seconds ago       Up 3 seconds        0.0.0.0:8888-&gt;8888/tcp   epic_swartz</code></pre><blockquote><p>通过命令docker logs 1b335 还可查看container的日志</p></blockquote><pre><code>[root@localhost test1]# docker logs 1b335&gt; webtest@1.0.0 start /home/Service&gt; node server.jsRunning on http://localhost:8888</code></pre><blockquote><p>说明服务已经启动。</p></blockquote><h2 id="4、进入容器"><a href="#4、进入容器" class="headerlink" title="4、进入容器"></a>4、进入容器</h2><p>为了方便查看容器内部文件和调试，可以通过命令进入容器中。容器内部就像一个小型的linux系统一样。命令为<code>docker exec -it 1b33 /bin/sh</code></p><pre><code>[root@localhost test1]# docker exec -it 1b33  /bin/sh/home/Service # lsDockerfile         node_modules       package-lock.json  package.json       server.js</code></pre><h2 id="5、日志"><a href="#5、日志" class="headerlink" title="5、日志"></a>5、日志</h2><ul><li>docker镜像中node工程会有打印日志功能，因为docker容器一旦挂掉，容器中的文件也会访问不了，所以日志必须要放在docker镜像外的文件路径下。此时，必须要将centos系统中的日志文件目录挂在到docker容器中，在容器启动时开启数据卷，实现日志采集。<br/></li><li>在启动容器时，使用命令<code>docker run -d -p 8888:8888 -v /home/logs:/data/logs 190f</code>即可。<code>/home/logs</code>为centos系统中日志文件目录，<code>data/logs</code>为docker容器中node工程写入日志路径。</li><li>如果docker容器中工程需要写入文件，则在启动时要加上<code>--privileged=true</code>才可以。<h2 id="6、打包与解压"><a href="#6、打包与解压" class="headerlink" title="6、打包与解压"></a>6、打包与解压</h2><blockquote><p>如果没有私有仓库，则可以通过save和load命令来打包和解压。<br>save将docker镜像压缩为tar文件，load为将tar文件解压生成镜像。</p></blockquote></li></ul><pre><code>[root@localhost docker]# docker imagesREPOSITORY              TAG                 IMAGE ID            CREATED             SIZEnode-app                v1                  190fba2814a6        2 months ago        71 MB[root@localhost docker]# docker save 190fba -o /home/docker/node-app-1.0.tar[root@localhost docker]# ll-rw-------. 1 root root 78526976 8月  26 19:38 node-app-1.0.tar</code></pre><blockquote><p>其中<code>/home/docker</code>文件路径为tar存放目录，必须提前建好，docker不会自动创建。<br /><br>而解压命令为:</p></blockquote><pre><code>[root@localhost docker]# docker load &lt; /home/docker/node-app-1.0.tarLoaded image ID: sha256:190fba2814a66291d06368a8afef499aa6f96f5d6def0b808d1fa5b76d862d53</code></pre><blockquote><p>此时容器将部署到环境中,可使用<code>docker images</code>查看。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署NodeJS实践(一、代理)</title>
      <link href="/2019/10/27/Docker%E9%83%A8%E7%BD%B2NodeJS%E5%AE%9E%E8%B7%B5-%E4%B8%80%E3%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2019/10/27/Docker%E9%83%A8%E7%BD%B2NodeJS%E5%AE%9E%E8%B7%B5-%E4%B8%80%E3%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本文在centos7系统中，采用Docker容器部署Nodejs工程。 Doceker版本1.31。</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>1、在centos系统中安装docker后，有一些服务器是没有连接外网权限的，可以测试是否能ping通。如果ping不通，则需要配置代理。本系统具体的实际代理地址及端口号，输入env即可显示。</p><p>2、方法</p><blockquote><p>1、在<code>/etc/systemd/system</code>目录下创建一个的<code>docker.service.d</code>文件夹</p></blockquote><pre><code>mkdir -p /etc/systemd/system/docker.service.d</code></pre><blockquote><p>2、在<code>docker.service.d</code>文件夹下创建http-proxy.conf文件，并添加HTTP_PROXY变量，其中proxy-url和proxy-port分别改成实际情况的代理地址和端口：</p></blockquote><pre><code>Environment=&quot;HTTP_PROXY=http://proxy-addr:proxy-port/&quot;&quot;HTTPS_PROXY=https://proxy-addr&quot;</code></pre><blockquote><p>3、如果有不需要使用代理来访问的Docker registries，那么还需要制定NO_PROXY环境变量：</p></blockquote><pre><code>Environment=&quot;HTTP_PROXY=http://proxy-addr:proxy-port/&quot;&quot;NO_PROXY=localhost,127.0.0.0/8&quot;</code></pre><blockquote><p>4、更新配置：</p></blockquote><pre><code>daemon-reload </code></pre><blockquote><p>5、重启docker服务</p></blockquote><pre><code>restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
